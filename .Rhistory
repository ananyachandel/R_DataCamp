source('D:/Personal/Study/Language_R/R_Studio/_9_DataVisualizationTutorials/_9_10_ggplot_ExerciseSolution_DataVisualization.R')
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("viridis", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(FA_acre),
label = ~paste0(Farm_ID, ": ", formatC(FA_acre, big.mark = ","))) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("viridis", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7
fillColor = ~pal(FA_acre),
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("viridis", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = ~paste0(Farm_ID, ": ", formatC(FA_acre, big.mark = ","))) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("viridis", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("viridis", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("viridis", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
help("colorFactor")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorFactor("BuGn", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorBin("BuGn", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("BuGn", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("BuGn", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("BuGn", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("Greens", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("RdBu", NULL)
leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("RdBu", NULL)
m <- leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
m
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("D:\Personal\Study\Language_R\R_Studio\_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("D:/Personal/Study/Language_R/R_Studio/_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("RdBu", NULL)
m <- leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
m
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("D:/Personal/Study/Language_R/R_Studio/_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("RdBu", NULL)
m <- leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
m
knitr::opts_chunk$set(root.dir = "./../")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson",
what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson", what = "sp")
library(leaflet)
library(geojsonio)
farms <- geojsonio::geojson_read("./bshr_sgmts.geojson", what = "sp")
# Or use the rgdal equivalent:
# farms <- rgdal::readOGR("./_12_DataVisualizationGisLeaflet/bshr_sgmts.geojson")
pal <- colorNumeric("RdBu", NULL)
m <- leaflet(data = farms, options = leafletOptions(maxZoom = 17)) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addProviderTiles(providers$Stamen.TonerLines) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
addPolygons(stroke = TRUE, weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
fillColor = ~pal(FA_acre),
label = farms$
Farm_ID) %>%
addLegend(pal = pal, values = ~FA_acre, opacity = 1.0)
m
m
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
shiny::runApp('_12_ShinyApp/12_1_template_ShinyApp')
source('~/.active-rstudio-document')
runApp('_12_ShinyApp/_12_1_template_ShinyApp.R')
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('_12_ShinyApp/_12_1_template_ShinyApp.R')
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document')
ui <- fluidPage(
sliderInput(inputId = "num", label = "Select the value", min = 1, max = 50, value = 20)
)
server <- function(input, output) {}
source('~/.active-rstudio-document')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
help("selected")
help("checkboxGroupInput")
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
help("radioButtons")
runApp('_12_ShinyApp/_12_1_uiInput_ShinyApp.R')
runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
runApp('_12_3_uiOutput_ShinyApp.R')
runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
runApp('_12_3_uiOutput_ShinyApp.R')
runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
library(shiny); runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='sobil-dalal', token='1B2A04DAF78739FFEEE396A28EA485B8', secret='y/Me6wZ5noG4XNkCRV3+nJKweKR/ILgrzEBP4V3H')
library(rsconnect)
library(shiny); runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
runApp('_12_ShinyApp/12_1_template_ShinyApp')
runApp('_12_ShinyApp/12_2_uiInput_ShinyApp')
runApp('_12_ShinyApp/_12_3_uiOutput_ShinyApp.R')
runApp('_12_ShinyApp/12_3_uiOutput_ShinyApp')
runApp('_12_ShinyApp/12_2_uiInput_ShinyApp')
runApp('_12_ShinyApp/12_3_uiOutput_ShinyApp')
runApp('_12_ShinyApp/12_2_uiInput_ShinyApp')
shiny::runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp()
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
summary(rnorm(30))
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
shiny::runApp('_12_ShinyApp/12_4_OutputRenderFunction_ShinyApp')
runApp('_12_ShinyApp/12_5_ObserveEvent_ShinyApp')
runApp('_12_ShinyApp/12_5_ObserveEvent_ShinyApp')
runApp('D:/Personal/Study/Language_R/R_Studio/_12_ShinyApp/12_5_eventReactive_ShinyApp')
runApp('_12_ShinyApp/12_5_eventReactive_ShinyApp')
runApp('_12_ShinyApp/12_5_eventReactive_ShinyApp')
runApp('_12_ShinyApp/12_5_eventReactive_ShinyApp')
a <- 10
a
print(a)
b <- 20
help("data.frame")
print(2^5)
asjgdj\
2^5
stock.prices = c(23,27,23,21,34)
stock.prices <- c(23,27,23,21,34)
print(stock.prices)
names(stock.prices) <- c('Mon','Tues','Wed','Thu','Fri')
stock.prices
goog <- c(450,451,462,473,487)
source('D:/Personal/Study/Language_R/R_Studio/_2_Matrix/_2_1_Create_Matrix.R')
random <- runif(20, min = 0, max = 100)
random
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
data.frame(x= 1, y = 1:10, fac = fac)
help(sample)
source('D:/Personal/Study/Language_R/R_Studio/_3_DataFrames/_3_1_Basic_DataFrames.R')
source('D:/Personal/Study/Language_R/R_Studio/_5_InputOutput/_5_1_CSV_InputOutput.R')
source('D:/Personal/Study/Language_R/R_Studio/_5_InputOutput/_5_1_CSV_InputOutput.R')
source('D:/Personal/Study/Language_R/R_Studio/_6_BasicProgrammingR/_6_5_functions_BasicProgrammingR.R')
v1 <- 1:10
v2 <- 20:30
v3 <- append(v1, v2)
print(v3)
v3 <- append(v1, v2, 5)
print(v3)
source('D:/Personal/Study/Language_R/R_Studio/_7_AdvancedProgrammingR/_7_2_sampleSapplyLapplyAnonymusFunction_AdvancedProgrammingR.R')
source('D:/Personal/Study/Language_R/R_Studio/_7_AdvancedProgrammingR/_7_3_mathFunctions_AdvancedProgrammingR.R')
source('D:/Personal/Study/Language_R/R_Studio/_7_AdvancedProgrammingR/_7_4_regularExpression_grepGreplFunction_AdvancedProgrammingR.R')
source('D:/Personal/Study/Language_R/R_Studio/_7_AdvancedProgrammingR/_7_5_dateTimeStamp_AdvancedProgrammingR.R')
source('D:/Personal/Study/Language_R/R_Studio/_7_AdvancedProgrammingR/_7_5_dateTimeStamp_AdvancedProgrammingR.R')
Sys.Date()
class(Sys.Date())
as.character(Sys.Date())
my.date <- as.Date("oct-31-2019", format = "%b-%d-%Y")
my.date
source('D:/Personal/Study/Language_R/R_Studio/_7_AdvancedProgrammingR/_7_5_dateTimeStamp_AdvancedProgrammingR.R')
